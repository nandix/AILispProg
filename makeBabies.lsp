;--------------------------------------------UPPER LEFT BLANK FUNCTIONS------------------------------------------

; moves element from upper left corner to the right one space
(defun move_uleft_right (parent)

	(let ((first_row (copy-list (first parent)))
	       (second_row (copy-list (second parent)))
	       (third_row (copy-list (third parent)))
		)
		(let (temp)
			(setf temp (second first_row))
			(setf (second first_row) 0)			
			(setf (first first_row) temp)
		)
		(return-from move_uleft_right  (append (list first_row) (list second_row) (list third_row)))
	)
)
; Moves element from upper left corner down one space
(defun move_uleft_down (parent)

	(let ((first_row (copy-list (first parent)))
	      (second_row (copy-list (second parent)))
	      (third_row (copy-list (third parent)))
 	      )	
		(let (temp)
			(setf temp (first  second_row))
			(setf (first second_row) 0)
			(setf (first first_row) temp)
		)	
		(return-from move_uleft_down  (append (list first_row) (list second_row) (list third_row)))
	)
)
;------------------------------------------------------------------------------------------------------------------

;--------------------------------------------UPPER MIDDLE BLANK FUNCTIONS------------------------------------------
(defun move_umid_left (parent)
	(let (	(first_row (copy-list (first parent)))
		(second_row (copy-list (second parent)))
		(third_row (copy-list (third parent)))
	     )
		(let (temp)
			(setf temp (first first_row))
			(setf (first first_row) 0)
			(setf (second first_row) temp)
		)	
		(return-from move_umid_left (append (list first_row) (list second_row) (list third_row)))
	)
)

(defun move_umid_right (parent)
	(let (	(first_row (copy-list (first parent)))
		(second_row (copy-list (second parent)))
		(third_row (copy-list (third parent)))
	     )
		(let (temp)
			(setf temp (third first_row))
			(setf (third first_row) 0)
			(setf (second first_row) temp)
		)
		(return-from move_umid_right (append (list first_row) (list second_row) (list third_row)))
	)
)

(defun move_umid_down (parent)
	(let (	(first_row (copy-list (first parent)))
		(second_row (copy-list (second parent)))
		(third_row (copy-list (third parent)))
	     )
		(let (temp)
			(setf temp (second second_row))
			(setf (second second_row) 0)
			(setf (second first_row) temp)
		)
		(return-from move_umid_down (append (list first_row) (list second_row) (list third_row)))
	)
)
;------------------------------------------------------------------------------------------------------------------


;-----------------------------------------------UPPER RIGHT BLANK SECTION------------------------------------------
(defun move_uright_left (parent)
	(let (	(first_row (copy-list (first parent)))
		(second_row (copy-list (second parent)))
		(third_row (copy-list (third parent)))
	     )
		(let (temp)
			(setf temp (second first_row))
			(setf (second first_row) 0)
			(setf (third first_row) temp)
		)
		(return-from move_uright_left (append (list first_row) (list second_row) (list third_row)))
	)
)

(defun move_uright_down (parent)
	(let ( 	(first_row (copy-list (first parent)))
		(second_row (copy-list (second parent)))
		(third_row (copy-list (third parent)))
	     )
		(let (temp)
			(setf temp (third second_row))
			(setf (third second_row) 0)
			(setf (third first_row) temp)
		)
		(return-from move_uright_down (append (list first_row) (list second_row) (list third_row)))
	)
)
;------------------------------------------------------------------------------------------------------------------
;--------------------------------------------MIDDLE LEFT BLANK FUNCTIONS-------------------------------------------
(defun move_mleft_down (parent)
	(let ( 	(first_row (copy-list (first parent)))
		(second_row (copy-list (second parent)))
		(third_row (copy-list (third parent)))
	     )
		(let (temp)
			(setf temp (first third_row))
			(setf (first third_row) 0)
			(setf (first second_row) temp)
		)
		(return-from move_mleft_down (append (list first_row) (list second_row) (list third_row)))
	)
)

; Swaps middle left element with middle right
(defun move_mleft_right (parent)
	(let ( 	(first_row (copy-list (first parent)))
		(second_row (copy-list (second parent)))
		(third_row (copy-list (third parent)))
	     )
		(let (temp)
			(setf temp (second second_row))
			(setf (second second_row) 0)
			(setf (first second_row) temp)
		)
		(return-from move_mleft_right (append (list first_row) (list second_row) (list third_row)))
	)
)

; Swaps middle left element with upper left
(defun move_mleft_up (parent)
	(let ( 	(first_row (copy-list (first parent)))
		(second_row (copy-list (second parent)))
		(third_row (copy-list (third parent)))
	     )
		(let (temp)
			(setf temp (first first_row))
			(setf (first first_row) 0)
			(setf (first second_row) temp)
		)
		(return-from move_mleft_up (append (list first_row) (list second_row) (list third_row)))
	)
)
;--------------------------------------------------------------------------------------------------------------------

;--------------------------------------------MIDDLE MIDDLE BLANK FUNCTIONS-------------------------------------------
(defun move_mmid_down (parent)
	(let ( 	(first_row (copy-list (first parent)))
		(second_row (copy-list (second parent)))
		(third_row (copy-list (third parent)))
	     )
		(let (temp)
			(setf temp (second third_row))
			(setf (second third_row) 0)
			(setf (second second_row) temp)
		)
		(return-from move_mmid_down (append (list first_row) (list second_row) (list third_row)))
	)
)

; Swaps middle middle element with middle right
(defun move_mmid_right (parent)
	(let ( 	(first_row (copy-list (first parent)))
		(second_row (copy-list (second parent)))
		(third_row (copy-list (third parent)))
	     )
		(let (temp)
			(setf temp (third second_row))
			(setf (third second_row) 0)
			(setf (second second_row) temp)
		)
		(return-from move_mmid_right (append (list first_row) (list second_row) (list third_row)))
	)
)

; Swaps middle middle element with upper middle
(defun move_mmid_up (parent)
	(let ( 	(first_row (copy-list (first parent)))
		(second_row (copy-list (second parent)))
		(third_row (copy-list (third parent)))
	     )
		(let (temp)
			(setf temp (second first_row))
			(setf (second first_row) 0)
			(setf (second second_row) temp)
		)
		(return-from move_mmid_up (append (list first_row) (list second_row) (list third_row)))
	)
)

; Swaps middle middle element with middle left
(defun move_mmid_left (parent)
	(let ( 	(first_row (copy-list (first parent)))
		(second_row (copy-list (second parent)))
		(third_row (copy-list (third parent)))
	     )
		(let (temp)
			(setf temp (first second_row))
			(setf (first second_row) 0)
			(setf (second second_row) temp)
		)
		(return-from move_mmid_left (append (list first_row) (list second_row) (list third_row)))
	)
)
;------------------------------------------------------------------------------------------------------------------

;--------------------------------------------MIDDLE RIGHT BLANK FUNCTIONS-------------------------------------------
(defun move_mright_down (parent)
	(let ( 	(first_row (copy-list (first parent)))
		(second_row (copy-list (second parent)))
		(third_row (copy-list (third parent)))
	     )
		(let (temp)
			(setf temp (third third_row))
			(setf (third third_row) 0)
			(setf (third second_row) temp)
		)
		(return-from move_mright_down (append (list first_row) (list second_row) (list third_row)))
	)
)

; Swaps middle right element with middle middle
(defun move_mright_left (parent)
	(let ( 	(first_row (copy-list (first parent)))
		(second_row (copy-list (second parent)))
		(third_row (copy-list (third parent)))
	     )
		(let (temp)
			(setf temp (second second_row))
			(setf (second second_row) 0)
			(setf (third second_row) temp)
		)
		(return-from move_mright_left (append (list first_row) (list second_row) (list third_row)))
	)
)

; Swaps middle right element with upper right
(defun move_mright_up (parent)
	(let ( 	(first_row (copy-list (first parent)))
		(second_row (copy-list (second parent)))
		(third_row (copy-list (third parent)))
	     )
		(let (temp)
			(setf temp (third first_row))
			(setf (third first_row) 0)
			(setf (third second_row) temp)
		)
		(return-from move_mright_up (append (list first_row) (list second_row) (list third_row)))
	)
)
;--------------------------------------------------------------------------------------------------------------------

;--------------------------------------------LOWER LEFT BLANK FUNCTIONS-------------------------------------------
; Swaps lower left with middle left
(defun move_lleft_up (parent)
	(let ( 	(first_row (copy-list (first parent)))
		(second_row (copy-list (second parent)))
		(third_row (copy-list (third parent)))
	     )
		(let (temp)
			(setf temp (first second_row))
			(setf (first second_row) 0)
			(setf (first third_row) temp)
		)
		(return-from move_lleft_up (append (list first_row) (list second_row) (list third_row)))
	)
)

; Swaps lower left with lower middle
(defun move_lleft_right (parent)
	(let ( 	(first_row (copy-list (first parent)))
		(second_row (copy-list (second parent)))
		(third_row (copy-list (third parent)))
	     )
		(let (temp)
			(setf temp (second third_row))
			(setf (second third_row) 0)
			(setf (first third_row) temp)
		)
		(return-from move_lleft_right (append (list first_row) (list second_row) (list third_row)))
	)
)

;--------------------------------------------------------------------------------------------------------------------

;--------------------------------------------LOWER MIDDLE BLANK FUNCTIONS-------------------------------------------
; Swaps lower middle with middle middle
(defun move_lmid_up (parent)
	(let ( 	(first_row (copy-list (first parent)))
		(second_row (copy-list (second parent)))
		(third_row (copy-list (third parent)))
	     )
		(let (temp)
			(setf temp (second second_row))
			(setf (second second_row) 0)
			(setf (second third_row) temp)
		)
		(return-from move_lmid_up (append (list first_row) (list second_row) (list third_row)))
	)
)

; Swaps lower middle with lower right
(defun move_lmid_right (parent)
	(let ( 	(first_row (copy-list (first parent)))
		(second_row (copy-list (second parent)))
		(third_row (copy-list (third parent)))
	     )
		(let (temp)
			(setf temp (third third_row))
			(setf (third third_row) 0)
			(setf (second third_row) temp)
		)
		(return-from move_lmid_right (append (list first_row) (list second_row) (list third_row)))
	)
)

; Swaps lower middle with lower left
(defun move_lmid_left (parent)
	(let ( 	(first_row (copy-list (first parent)))
		(second_row (copy-list (second parent)))
		(third_row (copy-list (third parent)))
	     )
		(let (temp)
			(setf temp (first third_row))
			(setf (first third_row) 0)
			(setf (second third_row) temp)
		)
		(return-from move_lmid_left (append (list first_row) (list second_row) (list third_row)))
	)
)

;--------------------------------------------------------------------------------------------------------------------

;--------------------------------------------LOWER RIGHT BLANK FUNCTIONS---------------------------------------------
; Swaps lower right with middle right
(defun move_lright_up (parent)
	(let ( 	(first_row (copy-list (first parent)))
		(second_row (copy-list (second parent)))
		(third_row (copy-list (third parent)))
	     )
		(let (temp)
			(setf temp (third second_row))
			(setf (third second_row) 0)
			(setf (third third_row) temp)
		)
		(return-from move_lright_up (append (list first_row) (list second_row) (list third_row)))
	)
)

; Swaps lower right with lower middle
(defun move_lright_left (parent)
	(let ( 	(first_row (copy-list (first parent)))
		(second_row (copy-list (second parent)))
		(third_row (copy-list (third parent)))
	     )
		(let (temp)
			(setf temp (second third_row))
			(setf (second third_row) 0)
			(setf (third third_row) temp)
		)
		(return-from move_lright_left (append (list first_row) (list second_row) (list third_row)))
	)
)

;--------------------------------------------------------------------------------------------------------------------

; Generates list of states based on if blank is in upper left corner
(defun upper_left (parent)
	(let ()
		(append (list (move_uleft_down parent))
			(list (move_uleft_right parent))
		)
	)
)

; Generates list of states based on if blank is in upper middle
(defun upper_middle (parent)
	(let ()
		(append (list (move_umid_left parent))
			(list (move_umid_down parent))
			(list (move_umid_right parent))
		)
	)
)

; Generates list of states based on if blank is in the upper right
(defun upper_right (parent)
	(let ()
		(append (list (move_uright_left parent))
			(list (move_uright_down parent))
		)
	)
)

; Generates list of states based on if blank is in middle left
(defun middle_left (parent)
	(let ()
		(append (list (move_mleft_up parent))
			(list (move_mleft_right parent))
			(list (move_mleft_down parent))
		)
	)
)

; Generates list of states based on if blank is in the very middle
(defun middle_middle (parent)
	(let ()
		(append (list (move_mmid_up parent))
				(list (move_mmid_left parent))
				(list (move_mmid_right parent))
				(list (move_mmid_down parent))
		)
	)
)

; Generates list of states based on if blank is in middle right
(defun middle_right (parent)
	(let ()
		(append (list (move_mright_down parent))
				(list (move_mright_left parent))
				(list (move_mright_up parent))
		)
	)
)

; Generates list of states based on if blank is in lower left
(defun lower_left (parent)
	(let ()
		(append (list (move_lleft_right parent))
				(list (move_lleft_up parent))
		)
	)
)

; Generates list of states based on if blank is in lower middle
(defun lower_middle (parent)
	(let ()
		(append (list (move_lmid_left parent))
				(list (move_lmid_up parent))
				(list (move_lmid_right parent))
		)
	)
)

; Generates list of states based on if blank is in lower right
(defun lower_right (parent)
	(let ()
		(append (list (move_lright_left parent))
				(list (move_lright_up parent))
		)
	)
)

(defun move_blank (parent)

	(let ((tempchildren()))
		(cond
			; if blank is in first row
			((find 0 (first x)) 
				(cond
					; if blank is in the upper left corner
					((= (first (car parent)) 0)
						(setf tempchildren (upper_left parent))
						(print tempchildren)
					)

					; if blank is in the upper middle box
					((= (second (car parent)) 0)
						(setf tempchildren (upper_middle parent))
						(print tempchildren)
					)

					; if blank is in upper right corner
					((= (third (car parent)) 0)
						(setf tempchildren (upper_right parent))
						(print tempchildren)
					)
				)
			)
			
			((find 0 (second x)) ; if blank is in second row\
				(cond
					; if blank is in middle left section
					((= (first (second parent)) 0)
						(setf tempchildren (middle_left parent))
						(print tempchildren)
					)
					; if blank is in middle middle section
					((= (second (second parent)) 0)
						(setf tempchildren (middle_middle parent))
						(print tempchildren)
					)
					; if blank is in middle right section
					((= (third (second parent)) 0)
						(setf tempchildren (middle_right parent))
						(print tempchildren)
					)
				)
			)
			; if blank is in third row
			((find 0 (third x)) 
				(cond
					; if blank is in lower left corner
					((= (first (third parent)) 0)
						(setf tempchildren (lower_left parent))
						(print tempchildren)
					)
						
					((= (second (third parent)) 0)
						(setf tempchildren (lower_middle parent))
						(print tempchildren)
					)
					((= (third (third parent)) 0)
						(setf tempchildren (lower_right parent))
						(print tempchildren)
					)
				)
				
			)
		)
	)

)


(defun main ()

	; test list
	(setf x '((4 1 8)(3 2 7)(6 5 0)))
	(print x)
	(move_blank x)
)

(main)
